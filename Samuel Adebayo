import requests
from requests.auth import HTTPBasicAuth
import re

# Confluence username and API token
username = 'email_address'
api_token = 'key gen'

auth = HTTPBasicAuth(username, api_token)

# Define the Search Query
search_query = 'password'

# Perform the Search `/content/search` allows you to search the content with confluence
base_url = 'https://domain.atlassian.net/wiki/rest/api'
search_endpoint = f'{base_url}/content/search'

# Define search parameters
params = {
    'cql': f'text ~ "{search_query}"',
    'limit': 100,  # Adjust the limit as needed
    'expand': 'body.storage'
}

# Disabling SSL verification (not recommended for production)
response = requests.get(search_endpoint, params=params, auth=auth, verify=False)

if response.status_code == 200:
    search_results = response.json()
    
    if 'results' in search_results:
        # Parse the Search Results, extracting relevant info from the result, including URL and contents where plaintext pwd found.
        for result in search_results['results']:
            page_id = result['id']
            page_title = result['title']
            page_url = result['_links']['self']
            page_content = result['body']['storage']['value']
            
            print(f"Page ID: {page_id}")
            print(f"Page Title: {page_title}")
            print(f"Page URL: {page_url}")
            print(f"Page Content: {page_content[:500]}...")  # Print the first 500 characters of the content
        
        # Analyse the Content using regular expression (regex)
        password_pattern = re.compile(r'(password\s*:\s*\w+)', re.IGNORECASE)
        
        for result in search_results['results']:
            page_content = result['body']['storage']['value']
            passwords = password_pattern.findall(page_content)
            
            if passwords:
                print(f"Potential passwords found on page '{result['title']}' ({result['_links']['self']}):")
                for password in passwords:
                    print(f" - {password}")
    else:
        print("No results found.")
else:
    print(f"Failed to fetch search results: {response.status_code} - {response.text}")
